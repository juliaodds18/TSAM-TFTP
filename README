Read-only Trivial File Transfer Protocol server 
Implemented in c

About the server:
Receives a request of a file from a client and sends the file in 512 bytes packets
to the client, if it exists.
The client has to send acknowledge between packets else he won't get the next packet.
The server can also receive error message and send error messages.

Usage:
To start the server: ./src/tftpd PORT directory
Send request from a client: tftp IP PORT -c get filename

The structure: 
There are two structs, one for sending packets to the client and one for sending 
error message to the client. There is one enum for the error codes and macros for
the opcodes. There are two functions send_data and send_error, they send packets 
to the client. 

Starting the server:
First there are some error checks:
 1. If the parameters from the client are strictly less than one nothing can be
    done, error messages are printed out.
 2. If the bind function returns -1 the binding was not successful, that is because
    the transfer ID does not mache and  error message are sent to the client. 
 3. If the modes are not netascii or octet error message are sent to the client. 
    The server only accepts netascii or octet. Netascii is modified 8-bit form of 
    ascii and Octet allows 8-bit bytes transfer with the received file resulting 
    byte-per-byte.
 4. If the file that the client asked for is not in the servers directory
    error messages are sent to the client.
 5. If everything is ok the first packet is sent to the client. The data in the 
    packet is max 512 bytes, there is also header including opcode and block number.
 6. When the client sents acknowledgement back the next packet is sent.
 7. If packet get lost the server will send it again. the acknowlege packet from the 
    client includes the last block number and if it does not match the last block number
    the packet got lost. 
 8. After the last packet was sent the filestream will be closed. 
